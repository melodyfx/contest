package main

import (
	"context"
	"errors"
	"fmt"
	"github.com/go-ini/ini"
	"github.com/milvus-io/milvus-sdk-go/v2/client"
	"github.com/milvus-io/milvus-sdk-go/v2/entity"
	"math/rand"
	"strings"
	"sync"
	"time"
)

const (
	msgFmt = "==== %s ====\n"
)

var ctx context.Context
var milvusAddr string
var username string
var password string
var collectionName string
var concurrency_num int
var dim int
var consistencyLevel string
var pkCol, embeddingsCol string
var topK int
var metricType string
var metricType2 entity.MetricType
var indexType string
var ef int
var interval int
var intervalEnable string

func printKV(cfg *ini.File) {
	secs := cfg.Sections()
	for _, s := range secs {
		// 排除名为DEFAULT的section
		if s.Name() == "DEFAULT" {
			continue
		}
		fmt.Println("打印配置文件:")
		fmt.Printf("===== %s =====\n", s.Name())
		keys := s.KeyStrings()
		for _, key := range keys {
			fmt.Printf("%s:%s\n", key, s.Key(key).String())
		}
		fmt.Println()
	}
}

func generateRandomFloat32() []float32 {
	vec := make([]float32, 0, dim)
	for i := 0; i < dim; i++ {
		vec = append(vec, rand.Float32())
	}
	return vec
}

func isoLevel(level string) (func(option *client.SearchQueryOption), error) {
	level = strings.ToLower(level)
	switch level {
	case "strong":
		return func(option *client.SearchQueryOption) {
			option.ConsistencyLevel = entity.ClStrong
		}, nil
	case "session":
		return func(option *client.SearchQueryOption) {
			option.ConsistencyLevel = entity.ClSession
		}, nil
	case "bounded":
		return func(option *client.SearchQueryOption) {
			option.ConsistencyLevel = entity.ClBounded
		}, nil
	case "eventually":
		return func(option *client.SearchQueryOption) {
			option.ConsistencyLevel = entity.ClEventually
		}, nil
	default:
		return nil, errors.New("不支持的隔离级别:" + level)
	}

}

func getMetricType(metric string) (entity.MetricType, error) {
	metric = strings.ToUpper(metric)
	switch metric {
	case "L2":
		return entity.L2, nil
	case "IP":
		return entity.IP, nil
	case "COSINE":
		return entity.COSINE, nil
	default:
		return "", errors.New("不支持的metricType:" + metric)
	}
}

// 获取主键名称
func getPkColAndEmCol(c client.Client) (string, string) {
	colls, _ := c.DescribeCollection(ctx, collectionName)
	fields := colls.Schema.Fields
	for i := 0; i < len(fields); i++ {
		if fields[i].PrimaryKey == true {
			pkCol = fields[i].Name
		}
		if fields[i].DataType == entity.FieldTypeFloatVector {
			embeddingsCol = fields[i].Name
		}
	}
	return pkCol, embeddingsCol
}

func getsearchParam(indexType string) (entity.SearchParam, error) {
	indexType = strings.ToUpper(indexType)
	switch indexType {
	case "FLAT":
		return entity.NewIndexFlatSearchParam()
	case "HNSW":
		return entity.NewIndexHNSWSearchParam(ef)
	default:
		return nil, errors.New("不支持的indexType:" + indexType)
	}
}

func bench(c client.Client) {
	vec := generateRandomFloat32()
	//vecx := []float32{0.3215394914150238, float32(math.NaN()), 0.2229059487581253, 0.23090289533138275, 0.031943902373313904, 0.9856643676757812, 0.6336928606033325, 0.7641114592552185, 0.49905264377593994, 0.21152381598949432, 0.43229055404663086, 0.5490155220031738, 0.8998090028762817, 0.7272774577140808, 0.3140939176082611, 0.01838395930826664, 0.00011128384358016774, 0.8336729407310486, 0.6709779500961304, 0.880447506904602, 0.5727291107177734, 0.5235654711723328, 0.5107824802398682, 0.12613190710544586, 0.11200296878814697, 0.1922311633825302, 0.9516943693161011, 0.3726814389228821, 0.09293435513973236, 0.991951048374176, 0.521769642829895, 0.22795161604881287, 0.4143655300140381, 0.3348066508769989, 0.5429540276527405, 0.6331627368927002, 0.8306674361228943, 0.7724123597145081, 0.19145376980304718, 0.9397093653678894, 0.8874521851539612, 0.7154554128646851, 0.8324337601661682, 0.5301572680473328, 0.08889323472976685, 0.89393550157547, 0.9205548763275146, 0.0982641652226448, 0.11352758854627609, 0.8165377974510193, 0.25784146785736084, 0.506298840045929, 0.6189834475517273, 0.8635391592979431, 0.16376380622386932, 0.09797999262809753, 0.43436798453330994, 0.7217848896980286, 0.6581186056137085, 0.3873758912086487, 0.9401732087135315, 0.03970973566174507, 0.9093195796012878, 0.3072391748428345, 0.8169566988945007, 0.5875359177589417, 0.556084394454956, 0.27825096249580383, 0.9188671112060547, 0.9760583639144897, 0.16400831937789917, 0.003806797554716468, 0.1687934696674347, 0.33196786046028137, 0.1275859773159027, 0.5897988677024841, 0.32011088728904724, 0.989855170249939, 0.9202970862388611, 0.3323762118816376, 0.42680656909942627, 0.3949558436870575, 0.6613403558731079, 0.48468950390815735, 0.02157990075647831, 0.23494356870651245, 0.37679463624954224, 0.7522416114807129, 0.8042488694190979, 0.24610625207424164, 0.856063961982727, 0.41730865836143494, 0.29052025079727173, 0.7358015179634094, 0.1846533715724945, 0.6537434458732605, 0.39833852648735046, 0.20019443333148956, 0.5663246512413025, 0.39327049255371094, 0.1941499561071396, 0.45981109142303467, 0.3570702075958252, 0.6183247566223145, 0.9031075239181519, 0.1961725354194641, 0.1504848748445511, 0.09339366108179092, 0.24515287578105927, 0.9997060894966125, 0.39712727069854736, 0.2379656881093979, 0.8707084059715271, 0.16419754922389984, 0.6897491216659546, 0.5398390889167786, 0.17056569457054138, 0.9417290687561035, 0.850838840007782, 0.8780386447906494, 0.48871421813964844, 0.8471288084983826, 0.5003410577774048, 0.6094990968704224, 0.7199205160140991, 0.7645950317382812, 0.5342068672180176, 0.14872953295707703, 0.8261349201202393, 0.8851880431175232, 0.32841843366622925, 0.05454741790890694, 0.43382948637008667, 0.5647249817848206, 0.38378018140792847, 0.24814948439598083, 0.08863405883312225, 0.9986876845359802, 0.3396192491054535, 0.4453502297401428, 0.3172825574874878, 0.6125110983848572, 0.13749848306179047, 0.13618431985378265, 0.5278739333152771, 0.3943627178668976, 0.8506167531013489, 0.8379415273666382, 0.7399125695228577, 0.9298198223114014, 0.2287178486585617, 0.9743154048919678, 0.17765696346759796, 0.27114859223365784, 0.17380207777023315, 0.9589934349060059, 0.6910946369171143, 0.9212017059326172, 0.2944967746734619, 0.6496999859809875, 0.9709327816963196, 0.22135327756404877, 0.42184877395629883, 0.7381666898727417, 0.23925185203552246, 0.2040567696094513, 0.4459725320339203, 0.4240749478340149, 0.10072009265422821, 0.5721533298492432, 0.2925260066986084, 0.9184054732322693, 0.40519294142723083, 0.49976110458374023, 0.7661933302879333, 0.9237728714942932, 0.2677130401134491, 0.6080760955810547, 0.2814617455005646, 0.16251911222934723, 0.8158906698226929, 0.78516685962677, 0.4279201924800873, 0.5094905495643616, 0.9562421441078186, 0.14868423342704773, 0.7190244793891907, 0.7303066849708557, 0.32970529794692993, 0.8036004900932312, 0.5466218590736389, 0.5264855623245239, 0.9000091552734375, 0.25693610310554504, 0.6676511764526367, 0.2519395053386688, 0.7863563299179077, 0.19389399886131287, 0.36327239871025085, 0.014083078131079674, 0.26389792561531067, 0.32661062479019165, 0.8333832621574402, 0.8062525987625122, 0.24686971306800842, 0.18453088402748108, 0.9668915867805481, 0.994010865688324, 0.21288280189037323, 0.18532195687294006, 0.9460152983665466, 0.42249542474746704, 0.25685998797416687, 0.21458858251571655, 0.16672539710998535, 0.2726558446884155, 0.16264350712299347, 0.9390340447425842, 0.4820120930671692, 0.5266265273094177, 0.19182777404785156, 0.3550727665424347, 0.8745529055595398, 0.4801516532897949, 0.9533143639564514, 0.7143471837043762, 0.6947826743125916, 0.37882834672927856, 0.5632164478302002, 0.7074641585350037, 0.6579256057739258, 0.09256324172019958, 0.7184273600578308, 0.8167757391929626, 0.4236088991165161, 0.10543125122785568, 0.13682037591934204, 0.12900018692016602, 0.54368656873703, 0.7005821466445923, 0.2207263559103012, 0.3604496419429779, 0.19683274626731873, 0.526325523853302, 0.08523285388946533, 0.7706997394561768, 0.5068299174308777, 0.34774449467658997, 0.4338037669658661, 0.33163079619407654, 0.9283192753791809, 0.617986261844635, 0.20322249829769135, 0.7356841564178467, 0.939556896686554, 0.6522080302238464, 0.3232578933238983, 0.4647926092147827, 0.23709622025489807, 0.38971614837646484, 0.17309311032295227, 0.6064453125, 0.4198145568370819, 0.21378353238105774, 0.5137561559677124, 0.17508172988891602, 0.5499688386917114, 0.2351488173007965, 0.296241819858551, 0.618452787399292, 0.015023946762084961, 0.7931886911392212, 0.454111784696579, 0.6217630505561829, 0.9780088067054749, 0.2818149924278259, 0.7140641212463379, 0.04260116443037987, 0.8127100467681885, 0.010497601702809334, 0.5189142823219299, 0.7483839988708496, 0.6422092318534851, 0.3704710304737091, 0.5310192108154297, 0.451955109834671, 0.271588534116745, 0.7171330451965332, 0.05540962517261505, 0.28685981035232544, 0.3476444482803345, 0.5981431603431702, 0.31663215160369873, 0.18229252099990845, 0.08318059891462326, 0.04670361056923866, 0.8984946608543396, 0.40139397978782654, 0.8670330047607422, 0.7192524075508118, 0.0707077607512474, 0.9207878708839417, 0.7279251217842102, 0.434177964925766, 0.8549039363861084, 0.19757744669914246, 0.4099929630756378, 0.7304863333702087, 0.652262270450592, 0.891150176525116, 0.7643625140190125, 0.2595864236354828, 0.3229132890701294, 0.7233994007110596, 0.7903817892074585, 0.9526141881942749, 0.3135130703449249, 0.5836987495422363, 0.6166912913322449, 0.01965091936290264, 0.8766376972198486, 0.6529457569122314, 0.14797662198543549, 0.008717246353626251, 0.8481054902076721, 0.2685703635215759, 0.9175564050674438, 0.47427770495414734, 0.9581541419029236, 0.6090614199638367, 0.25373685359954834, 0.3835168778896332, 0.572019100189209, 0.4314558804035187, 0.2842453718185425, 0.24178393185138702, 0.3107762634754181, 0.6879650354385376, 0.20560815930366516, 0.5335502028465271, 0.8636213541030884, 0.2924307882785797, 0.9216665625572205, 0.486870676279068, 0.04050029069185257, 0.4592835009098053, 0.1923801302909851, 0.4796217381954193, 0.9960892796516418, 0.14508099853992462, 0.8339616060256958, 0.4035903513431549, 0.46762150526046753, 0.20974765717983246, 0.5055849552154541, 0.47434791922569275, 0.5174289345741272, 0.2154197096824646, 0.41903769969940186, 0.24734127521514893, 0.18621979653835297, 0.4613689184188843, 0.6593659520149231, 0.2576749622821808, 0.5665239691734314, 0.8826797008514404, 0.35173672437667847, 0.21454794704914093, 0.22395923733711243, 0.7638149261474609, 0.7008535265922546, 0.33913907408714294, 0.7149361968040466, 0.6330757141113281, 0.6330615282058716, 0.35705330967903137, 0.09187577664852142, 0.25600388646125793, 0.6419909000396729, 0.9717378616333008, 0.07574672996997833, 0.5703192949295044, 0.6667504906654358, 0.4882649779319763, 0.5519181489944458, 0.9273799061775208, 0.9727580547332764, 0.4102679193019867, 0.6604758501052856, 0.22228305041790009, 0.3579134941101074, 0.7974727749824524, 0.931476891040802, 0.8907015323638916, 0.3911970555782318, 0.20546647906303406, 0.11814303696155548, 0.46685564517974854, 0.4431368112564087, 0.392624169588089, 0.5024821758270264, 0.8857970237731934, 0.28673428297042847, 0.8463459610939026, 0.9815744757652283, 0.5251984596252441, 0.5036007761955261, 0.7604175806045532, 0.0277005136013031, 0.8919922709465027, 0.6259276866912842, 0.8623397946357727, 0.4834277331829071, 0.9983975887298584, 0.7942978739738464, 0.7282294034957886, 0.7848808765411377, 0.6471843719482422, 0.41039836406707764, 0.7164270877838135, 0.21314910054206848, 0.1323007345199585, 0.8205071091651917, 0.5087656378746033, 0.7097458839416504, 0.6841047406196594, 0.8015605807304382, 0.6618996858596802, 0.7653696537017822, 0.12748198211193085, 0.3219878077507019, 0.8167771697044373, 0.7955143451690674, 0.04854554682970047, 0.47899192571640015, 0.32252827286720276, 0.7756503820419312, 0.9254337549209595, 0.6200339198112488, 0.8023305535316467, 0.017939448356628418, 0.8111178278923035, 0.06600230187177658, 0.346935510635376, 0.22821594774723053, 0.18338488042354584, 0.13340912759304047, 0.5877909660339355, 0.15475013852119446, 0.01074671559035778, 0.650752604007721, 0.23235537111759186, 0.891303539276123, 0.2701464891433716, 0.24418675899505615, 0.4493130147457123, 0.3450007140636444, 0.6780932545661926, 0.5846342444419861, 0.7051880955696106, 0.9201673865318298, 0.05764653533697128, 0.4671676754951477, 0.6174260377883911, 0.2749561667442322, 0.5198169946670532, 0.29590868949890137, 0.07638812065124512, 0.36795100569725037, 0.776637077331543, 0.7370879054069519, 0.7603951096534729, 0.7550972700119019, 0.7219960689544678, 0.4316973388195038, 0.6549020409584045, 0.5915670990943909, 0.6635675430297852, 0.069529227912426, 0.851772665977478, 0.29240837693214417, 0.4108639359474182, 0.1850542426109314, 0.5442219376564026, 0.1320347785949707, 0.03668117895722389, 0.2712242007255554, 0.4888121485710144, 0.110404834151268, 0.35875818133354187, 0.043688297271728516, 0.1041671484708786, 0.30972886085510254, 0.2135179489850998, 0.14151257276535034, 0.5575513243675232, 0.5340451598167419, 0.7069964408874512, 0.16233490407466888, 0.5715228915214539, 0.46799591183662415, 0.009323213249444962, 0.6532473564147949, 0.6939340829849243, 0.7099520564079285, 0.6353923082351685, 0.7840734124183655, 0.38270315527915955, 0.4790378510951996, 0.7031734585762024, 0.5375373959541321, 0.6898146271705627}
	fmt.Printf(msgFmt, "start searching based on vector similarity")
	vec2search := []entity.Vector{
		entity.FloatVector(vec),
	}
	// 设置搜索参数
	sp, err := getsearchParam(indexType)
	if err != nil {
		fmt.Println(err)
		return
	}
	// 设置隔离级别
	iso, err := isoLevel(consistencyLevel)
	if err != nil {
		fmt.Println(err)
		return
	}

	// 输出字段为pk
	begin := time.Now()
	sRet, err := c.Search(ctx, collectionName, nil, "", []string{pkCol}, vec2search,
		embeddingsCol, metricType2, topK, sp, iso)
	end := time.Now()
	if err != nil {
		fmt.Println("failed to search collection, err: ", err)
		return
	}
	if len(sRet) > 0 {
		if sRet[0].Err != nil {
			fmt.Printf("查询报错:%s,向量:%s\n", sRet[0].Err, fmt.Sprint(vec))
			return
		}
	}

	fmt.Printf("result count:%d,search latency: %dms\n", sRet[0].ResultCount, end.Sub(begin)/time.Millisecond)
}

func main() {
	rand.Seed(time.Now().UnixNano())
	// 1. 加载INI配置文件
	cfg, err := ini.Load("config.ini")
	if err != nil {
		fmt.Printf("无法加载配置文件: %v", err)
		return
	}
	printKV(cfg)

	// 2. 读取配置项
	// 指定section名称
	section := cfg.Section("milvus_server")
	if section == nil {
		fmt.Println("找不到指定的section")
		return
	}

	milvusAddr = section.Key("milvusAddr").String()
	username = section.Key("username").String()
	password = section.Key("password").String()
	collectionName = section.Key("collectionName").String()
	consistencyLevel = section.Key("consistencyLevel").String()
	concurrency_num, err = section.Key("concurrency_num").Int()
	if err != nil {
		fmt.Println("Error converting concurrency_num(string) to int:", err)
		return
	}
	intervalEnable = section.Key("interval_enable").String()
	if strings.ToUpper(intervalEnable) != "ON" && strings.ToUpper(intervalEnable) != "OFF" {
		fmt.Println("参数interval_enable设置有误:" + intervalEnable)
		return
	}

	interval, err = section.Key("interval").Int()
	if err != nil {
		fmt.Println("Error converting interval(string) to int:", err)
		return
	}
	dim, err = section.Key("dim").Int()
	if err != nil {
		fmt.Println("Error converting dim(string) to int:", err)
		return
	}
	topK, err = section.Key("topK").Int()
	if err != nil {
		fmt.Println("Error converting topK(string) to int:", err)
		return
	}
	metricType := section.Key("metricType").String()
	metricType2, err = getMetricType(metricType)
	if err != nil {
		fmt.Println(err)
		return
	}
	indexType = section.Key("indexType").String()
	ef, err = section.Key("hnsw.ef").Int()
	if err != nil {
		fmt.Println("Error converting hnsw.ef(string) to int:", err)
		return
	}

	ctx = context.Background()

	var clients = make([]client.Client, concurrency_num)
	fmt.Printf(msgFmt, "start connecting to Milvus")
	c, err := client.NewClient(ctx, client.Config{
		Address:  milvusAddr,
		Username: username,
		Password: password,
	})
	if err != nil {
		fmt.Printf("failed to connect to milvus, err: %s\n", err.Error())
		return
	}
	defer c.Close()
	// 获取collection的pk字段名称
	pkCol, embeddingsCol = getPkColAndEmCol(c)
	// 校验客户端和服务端索引类型
	idx, _ := c.DescribeIndex(ctx, collectionName, embeddingsCol)
	it := idx[0].IndexType()
	if strings.ToUpper(string(it)) != strings.ToUpper(indexType) {
		fmt.Printf("索引类型不匹配,客户端:%s,服务端:%s", indexType, it)
		return
	}
	pars := idx[0].Params()
	if pars["metric_type"] != metricType {
		fmt.Printf("metric_type不匹配,客户端:%s,服务端:%s", metricType, pars["metric_type"])
		return
	}

	for i := 0; i < concurrency_num; i++ {
		c, err := client.NewClient(ctx, client.Config{
			Address:  milvusAddr,
			Username: username,
			Password: password,
		})
		if err != nil {
			fmt.Printf("failed to connect to milvus, err: %s\n", err.Error())
			return
		}
		clients[i] = c
	}

	for i := 0; i < concurrency_num; i++ {
		defer clients[i].Close()
	}

	wg := sync.WaitGroup{}
	// 设置并发数
	begin := time.Now()
	for i := 0; i < concurrency_num; i++ {
		wg.Add(1)
		go func(x int) {
			bench(clients[x])
			wg.Done()
		}(i)
		if strings.ToUpper(intervalEnable) == "ON" {
			time.Sleep(time.Duration(interval) * time.Microsecond)
		}
	}
	wg.Wait()
	end := time.Now()
	fmt.Printf("sum latency: %dms\n", end.Sub(begin)/time.Millisecond)

}
